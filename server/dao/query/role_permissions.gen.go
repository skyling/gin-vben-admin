// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gin-vben-admin/dao/models"
)

func newRolePermission(db *gorm.DB, opts ...gen.DOOption) rolePermission {
	_rolePermission := rolePermission{}

	_rolePermission.rolePermissionDo.UseDB(db, opts...)
	_rolePermission.rolePermissionDo.UseModel(&models.RolePermission{})

	tableName := _rolePermission.rolePermissionDo.TableName()
	_rolePermission.ALL = field.NewAsterisk(tableName)
	_rolePermission.RoleID = field.NewInt64(tableName, "role_id")
	_rolePermission.PermissionID = field.NewInt64(tableName, "permission_id")

	_rolePermission.fillFieldMap()

	return _rolePermission
}

type rolePermission struct {
	rolePermissionDo

	ALL          field.Asterisk
	RoleID       field.Int64
	PermissionID field.Int64

	fieldMap map[string]field.Expr
}

func (r rolePermission) Table(newTableName string) *rolePermission {
	r.rolePermissionDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rolePermission) As(alias string) *rolePermission {
	r.rolePermissionDo.DO = *(r.rolePermissionDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rolePermission) updateTableName(table string) *rolePermission {
	r.ALL = field.NewAsterisk(table)
	r.RoleID = field.NewInt64(table, "role_id")
	r.PermissionID = field.NewInt64(table, "permission_id")

	r.fillFieldMap()

	return r
}

func (r *rolePermission) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rolePermission) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 2)
	r.fieldMap["role_id"] = r.RoleID
	r.fieldMap["permission_id"] = r.PermissionID
}

func (r rolePermission) clone(db *gorm.DB) rolePermission {
	r.rolePermissionDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r rolePermission) replaceDB(db *gorm.DB) rolePermission {
	r.rolePermissionDo.ReplaceDB(db)
	return r
}

type rolePermissionDo struct{ gen.DO }

type IRolePermissionDo interface {
	gen.SubQuery
	Debug() IRolePermissionDo
	WithContext(ctx context.Context) IRolePermissionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRolePermissionDo
	WriteDB() IRolePermissionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRolePermissionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRolePermissionDo
	Not(conds ...gen.Condition) IRolePermissionDo
	Or(conds ...gen.Condition) IRolePermissionDo
	Select(conds ...field.Expr) IRolePermissionDo
	Where(conds ...gen.Condition) IRolePermissionDo
	Order(conds ...field.Expr) IRolePermissionDo
	Distinct(cols ...field.Expr) IRolePermissionDo
	Omit(cols ...field.Expr) IRolePermissionDo
	Join(table schema.Tabler, on ...field.Expr) IRolePermissionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRolePermissionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRolePermissionDo
	Group(cols ...field.Expr) IRolePermissionDo
	Having(conds ...gen.Condition) IRolePermissionDo
	Limit(limit int) IRolePermissionDo
	Offset(offset int) IRolePermissionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRolePermissionDo
	Unscoped() IRolePermissionDo
	Create(values ...*models.RolePermission) error
	CreateInBatches(values []*models.RolePermission, batchSize int) error
	Save(values ...*models.RolePermission) error
	First() (*models.RolePermission, error)
	Take() (*models.RolePermission, error)
	Last() (*models.RolePermission, error)
	Find() ([]*models.RolePermission, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.RolePermission, err error)
	FindInBatches(result *[]*models.RolePermission, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.RolePermission) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRolePermissionDo
	Assign(attrs ...field.AssignExpr) IRolePermissionDo
	Joins(fields ...field.RelationField) IRolePermissionDo
	Preload(fields ...field.RelationField) IRolePermissionDo
	FirstOrInit() (*models.RolePermission, error)
	FirstOrCreate() (*models.RolePermission, error)
	FindByPage(offset int, limit int) (result []*models.RolePermission, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRolePermissionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int64) (result *models.RolePermission, err error)
	GetByIds(ids []int64) (result []*models.RolePermission, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (r rolePermissionDo) GetByID(id int64) (result *models.RolePermission, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM role_permissions WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE id in (@ids)
func (r rolePermissionDo) GetByIds(ids []int64) (result []*models.RolePermission, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, ids)
	generateSQL.WriteString("SELECT * FROM role_permissions WHERE id in (?) ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (r rolePermissionDo) Debug() IRolePermissionDo {
	return r.withDO(r.DO.Debug())
}

func (r rolePermissionDo) WithContext(ctx context.Context) IRolePermissionDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rolePermissionDo) ReadDB() IRolePermissionDo {
	return r.Clauses(dbresolver.Read)
}

func (r rolePermissionDo) WriteDB() IRolePermissionDo {
	return r.Clauses(dbresolver.Write)
}

func (r rolePermissionDo) Session(config *gorm.Session) IRolePermissionDo {
	return r.withDO(r.DO.Session(config))
}

func (r rolePermissionDo) Clauses(conds ...clause.Expression) IRolePermissionDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rolePermissionDo) Returning(value interface{}, columns ...string) IRolePermissionDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rolePermissionDo) Not(conds ...gen.Condition) IRolePermissionDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rolePermissionDo) Or(conds ...gen.Condition) IRolePermissionDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rolePermissionDo) Select(conds ...field.Expr) IRolePermissionDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rolePermissionDo) Where(conds ...gen.Condition) IRolePermissionDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rolePermissionDo) Order(conds ...field.Expr) IRolePermissionDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rolePermissionDo) Distinct(cols ...field.Expr) IRolePermissionDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rolePermissionDo) Omit(cols ...field.Expr) IRolePermissionDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rolePermissionDo) Join(table schema.Tabler, on ...field.Expr) IRolePermissionDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rolePermissionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRolePermissionDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rolePermissionDo) RightJoin(table schema.Tabler, on ...field.Expr) IRolePermissionDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rolePermissionDo) Group(cols ...field.Expr) IRolePermissionDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rolePermissionDo) Having(conds ...gen.Condition) IRolePermissionDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rolePermissionDo) Limit(limit int) IRolePermissionDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rolePermissionDo) Offset(offset int) IRolePermissionDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rolePermissionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRolePermissionDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rolePermissionDo) Unscoped() IRolePermissionDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rolePermissionDo) Create(values ...*models.RolePermission) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rolePermissionDo) CreateInBatches(values []*models.RolePermission, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rolePermissionDo) Save(values ...*models.RolePermission) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rolePermissionDo) First() (*models.RolePermission, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.RolePermission), nil
	}
}

func (r rolePermissionDo) Take() (*models.RolePermission, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.RolePermission), nil
	}
}

func (r rolePermissionDo) Last() (*models.RolePermission, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.RolePermission), nil
	}
}

func (r rolePermissionDo) Find() ([]*models.RolePermission, error) {
	result, err := r.DO.Find()
	return result.([]*models.RolePermission), err
}

func (r rolePermissionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.RolePermission, err error) {
	buf := make([]*models.RolePermission, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rolePermissionDo) FindInBatches(result *[]*models.RolePermission, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rolePermissionDo) Attrs(attrs ...field.AssignExpr) IRolePermissionDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rolePermissionDo) Assign(attrs ...field.AssignExpr) IRolePermissionDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rolePermissionDo) Joins(fields ...field.RelationField) IRolePermissionDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rolePermissionDo) Preload(fields ...field.RelationField) IRolePermissionDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rolePermissionDo) FirstOrInit() (*models.RolePermission, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.RolePermission), nil
	}
}

func (r rolePermissionDo) FirstOrCreate() (*models.RolePermission, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.RolePermission), nil
	}
}

func (r rolePermissionDo) FindByPage(offset int, limit int) (result []*models.RolePermission, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rolePermissionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rolePermissionDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rolePermissionDo) Delete(models ...*models.RolePermission) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rolePermissionDo) withDO(do gen.Dao) *rolePermissionDo {
	r.DO = *do.(*gen.DO)
	return r
}
