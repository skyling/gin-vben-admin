// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gin-vben-admin/dao/models"
)

func newCodeIndex(db *gorm.DB, opts ...gen.DOOption) codeIndex {
	_codeIndex := codeIndex{}

	_codeIndex.codeIndexDo.UseDB(db, opts...)
	_codeIndex.codeIndexDo.UseModel(&models.CodeIndex{})

	tableName := _codeIndex.codeIndexDo.TableName()
	_codeIndex.ALL = field.NewAsterisk(tableName)
	_codeIndex.ID = field.NewInt64(tableName, "id")
	_codeIndex.CreatedAt = field.NewTime(tableName, "created_at")
	_codeIndex.UpdatedAt = field.NewTime(tableName, "updated_at")
	_codeIndex.DeletedAt = field.NewField(tableName, "deleted_at")
	_codeIndex.Type = field.NewString(tableName, "type")
	_codeIndex.Date = field.NewString(tableName, "date")
	_codeIndex.Index = field.NewInt64(tableName, "index")

	_codeIndex.fillFieldMap()

	return _codeIndex
}

type codeIndex struct {
	codeIndexDo

	ALL       field.Asterisk
	ID        field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Type      field.String
	Date      field.String
	Index     field.Int64

	fieldMap map[string]field.Expr
}

func (c codeIndex) Table(newTableName string) *codeIndex {
	c.codeIndexDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c codeIndex) As(alias string) *codeIndex {
	c.codeIndexDo.DO = *(c.codeIndexDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *codeIndex) updateTableName(table string) *codeIndex {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Type = field.NewString(table, "type")
	c.Date = field.NewString(table, "date")
	c.Index = field.NewInt64(table, "index")

	c.fillFieldMap()

	return c
}

func (c *codeIndex) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *codeIndex) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["type"] = c.Type
	c.fieldMap["date"] = c.Date
	c.fieldMap["index"] = c.Index
}

func (c codeIndex) clone(db *gorm.DB) codeIndex {
	c.codeIndexDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c codeIndex) replaceDB(db *gorm.DB) codeIndex {
	c.codeIndexDo.ReplaceDB(db)
	return c
}

type codeIndexDo struct{ gen.DO }

type ICodeIndexDo interface {
	gen.SubQuery
	Debug() ICodeIndexDo
	WithContext(ctx context.Context) ICodeIndexDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICodeIndexDo
	WriteDB() ICodeIndexDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICodeIndexDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICodeIndexDo
	Not(conds ...gen.Condition) ICodeIndexDo
	Or(conds ...gen.Condition) ICodeIndexDo
	Select(conds ...field.Expr) ICodeIndexDo
	Where(conds ...gen.Condition) ICodeIndexDo
	Order(conds ...field.Expr) ICodeIndexDo
	Distinct(cols ...field.Expr) ICodeIndexDo
	Omit(cols ...field.Expr) ICodeIndexDo
	Join(table schema.Tabler, on ...field.Expr) ICodeIndexDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICodeIndexDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICodeIndexDo
	Group(cols ...field.Expr) ICodeIndexDo
	Having(conds ...gen.Condition) ICodeIndexDo
	Limit(limit int) ICodeIndexDo
	Offset(offset int) ICodeIndexDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICodeIndexDo
	Unscoped() ICodeIndexDo
	Create(values ...*models.CodeIndex) error
	CreateInBatches(values []*models.CodeIndex, batchSize int) error
	Save(values ...*models.CodeIndex) error
	First() (*models.CodeIndex, error)
	Take() (*models.CodeIndex, error)
	Last() (*models.CodeIndex, error)
	Find() ([]*models.CodeIndex, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.CodeIndex, err error)
	FindInBatches(result *[]*models.CodeIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.CodeIndex) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICodeIndexDo
	Assign(attrs ...field.AssignExpr) ICodeIndexDo
	Joins(fields ...field.RelationField) ICodeIndexDo
	Preload(fields ...field.RelationField) ICodeIndexDo
	FirstOrInit() (*models.CodeIndex, error)
	FirstOrCreate() (*models.CodeIndex, error)
	FindByPage(offset int, limit int) (result []*models.CodeIndex, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICodeIndexDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int64) (result *models.CodeIndex, err error)
	GetByIds(ids []int64) (result []*models.CodeIndex, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (c codeIndexDo) GetByID(id int64) (result *models.CodeIndex, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM code_indices WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE id in (@ids)
func (c codeIndexDo) GetByIds(ids []int64) (result []*models.CodeIndex, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, ids)
	generateSQL.WriteString("SELECT * FROM code_indices WHERE id in (?) ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (c codeIndexDo) Debug() ICodeIndexDo {
	return c.withDO(c.DO.Debug())
}

func (c codeIndexDo) WithContext(ctx context.Context) ICodeIndexDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c codeIndexDo) ReadDB() ICodeIndexDo {
	return c.Clauses(dbresolver.Read)
}

func (c codeIndexDo) WriteDB() ICodeIndexDo {
	return c.Clauses(dbresolver.Write)
}

func (c codeIndexDo) Session(config *gorm.Session) ICodeIndexDo {
	return c.withDO(c.DO.Session(config))
}

func (c codeIndexDo) Clauses(conds ...clause.Expression) ICodeIndexDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c codeIndexDo) Returning(value interface{}, columns ...string) ICodeIndexDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c codeIndexDo) Not(conds ...gen.Condition) ICodeIndexDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c codeIndexDo) Or(conds ...gen.Condition) ICodeIndexDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c codeIndexDo) Select(conds ...field.Expr) ICodeIndexDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c codeIndexDo) Where(conds ...gen.Condition) ICodeIndexDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c codeIndexDo) Order(conds ...field.Expr) ICodeIndexDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c codeIndexDo) Distinct(cols ...field.Expr) ICodeIndexDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c codeIndexDo) Omit(cols ...field.Expr) ICodeIndexDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c codeIndexDo) Join(table schema.Tabler, on ...field.Expr) ICodeIndexDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c codeIndexDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICodeIndexDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c codeIndexDo) RightJoin(table schema.Tabler, on ...field.Expr) ICodeIndexDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c codeIndexDo) Group(cols ...field.Expr) ICodeIndexDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c codeIndexDo) Having(conds ...gen.Condition) ICodeIndexDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c codeIndexDo) Limit(limit int) ICodeIndexDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c codeIndexDo) Offset(offset int) ICodeIndexDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c codeIndexDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICodeIndexDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c codeIndexDo) Unscoped() ICodeIndexDo {
	return c.withDO(c.DO.Unscoped())
}

func (c codeIndexDo) Create(values ...*models.CodeIndex) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c codeIndexDo) CreateInBatches(values []*models.CodeIndex, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c codeIndexDo) Save(values ...*models.CodeIndex) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c codeIndexDo) First() (*models.CodeIndex, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.CodeIndex), nil
	}
}

func (c codeIndexDo) Take() (*models.CodeIndex, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.CodeIndex), nil
	}
}

func (c codeIndexDo) Last() (*models.CodeIndex, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.CodeIndex), nil
	}
}

func (c codeIndexDo) Find() ([]*models.CodeIndex, error) {
	result, err := c.DO.Find()
	return result.([]*models.CodeIndex), err
}

func (c codeIndexDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.CodeIndex, err error) {
	buf := make([]*models.CodeIndex, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c codeIndexDo) FindInBatches(result *[]*models.CodeIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c codeIndexDo) Attrs(attrs ...field.AssignExpr) ICodeIndexDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c codeIndexDo) Assign(attrs ...field.AssignExpr) ICodeIndexDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c codeIndexDo) Joins(fields ...field.RelationField) ICodeIndexDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c codeIndexDo) Preload(fields ...field.RelationField) ICodeIndexDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c codeIndexDo) FirstOrInit() (*models.CodeIndex, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.CodeIndex), nil
	}
}

func (c codeIndexDo) FirstOrCreate() (*models.CodeIndex, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.CodeIndex), nil
	}
}

func (c codeIndexDo) FindByPage(offset int, limit int) (result []*models.CodeIndex, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c codeIndexDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c codeIndexDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c codeIndexDo) Delete(models ...*models.CodeIndex) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *codeIndexDo) withDO(do gen.Dao) *codeIndexDo {
	c.DO = *do.(*gen.DO)
	return c
}
