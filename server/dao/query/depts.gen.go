// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gin-vben-admin/dao/models"
)

func newDept(db *gorm.DB, opts ...gen.DOOption) dept {
	_dept := dept{}

	_dept.deptDo.UseDB(db, opts...)
	_dept.deptDo.UseModel(&models.Dept{})

	tableName := _dept.deptDo.TableName()
	_dept.ALL = field.NewAsterisk(tableName)
	_dept.ID = field.NewInt64(tableName, "id")
	_dept.CreatedAt = field.NewTime(tableName, "created_at")
	_dept.UpdatedAt = field.NewTime(tableName, "updated_at")
	_dept.DeletedAt = field.NewField(tableName, "deleted_at")
	_dept.TenantID = field.NewInt64(tableName, "tenant_id")
	_dept.Name = field.NewString(tableName, "name")
	_dept.ParentID = field.NewInt64(tableName, "parent_id")
	_dept.Sort = field.NewInt64(tableName, "sort")
	_dept.Status = field.NewInt64(tableName, "status")
	_dept.Remark = field.NewString(tableName, "remark")
	_dept.Depts = deptHasManyDepts{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Depts", "models.Dept"),
		Depts: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Depts.Depts", "models.Dept"),
		},
	}

	_dept.fillFieldMap()

	return _dept
}

type dept struct {
	deptDo

	ALL       field.Asterisk
	ID        field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	TenantID  field.Int64
	Name      field.String
	ParentID  field.Int64
	Sort      field.Int64
	Status    field.Int64
	Remark    field.String
	Depts     deptHasManyDepts

	fieldMap map[string]field.Expr
}

func (d dept) Table(newTableName string) *dept {
	d.deptDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dept) As(alias string) *dept {
	d.deptDo.DO = *(d.deptDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dept) updateTableName(table string) *dept {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewField(table, "deleted_at")
	d.TenantID = field.NewInt64(table, "tenant_id")
	d.Name = field.NewString(table, "name")
	d.ParentID = field.NewInt64(table, "parent_id")
	d.Sort = field.NewInt64(table, "sort")
	d.Status = field.NewInt64(table, "status")
	d.Remark = field.NewString(table, "remark")

	d.fillFieldMap()

	return d
}

func (d *dept) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dept) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 11)
	d.fieldMap["id"] = d.ID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["tenant_id"] = d.TenantID
	d.fieldMap["name"] = d.Name
	d.fieldMap["parent_id"] = d.ParentID
	d.fieldMap["sort"] = d.Sort
	d.fieldMap["status"] = d.Status
	d.fieldMap["remark"] = d.Remark

}

func (d dept) clone(db *gorm.DB) dept {
	d.deptDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dept) replaceDB(db *gorm.DB) dept {
	d.deptDo.ReplaceDB(db)
	return d
}

type deptHasManyDepts struct {
	db *gorm.DB

	field.RelationField

	Depts struct {
		field.RelationField
	}
}

func (a deptHasManyDepts) Where(conds ...field.Expr) *deptHasManyDepts {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a deptHasManyDepts) WithContext(ctx context.Context) *deptHasManyDepts {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a deptHasManyDepts) Session(session *gorm.Session) *deptHasManyDepts {
	a.db = a.db.Session(session)
	return &a
}

func (a deptHasManyDepts) Model(m *models.Dept) *deptHasManyDeptsTx {
	return &deptHasManyDeptsTx{a.db.Model(m).Association(a.Name())}
}

type deptHasManyDeptsTx struct{ tx *gorm.Association }

func (a deptHasManyDeptsTx) Find() (result []*models.Dept, err error) {
	return result, a.tx.Find(&result)
}

func (a deptHasManyDeptsTx) Append(values ...*models.Dept) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a deptHasManyDeptsTx) Replace(values ...*models.Dept) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a deptHasManyDeptsTx) Delete(values ...*models.Dept) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a deptHasManyDeptsTx) Clear() error {
	return a.tx.Clear()
}

func (a deptHasManyDeptsTx) Count() int64 {
	return a.tx.Count()
}

type deptDo struct{ gen.DO }

type IDeptDo interface {
	gen.SubQuery
	Debug() IDeptDo
	WithContext(ctx context.Context) IDeptDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDeptDo
	WriteDB() IDeptDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDeptDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDeptDo
	Not(conds ...gen.Condition) IDeptDo
	Or(conds ...gen.Condition) IDeptDo
	Select(conds ...field.Expr) IDeptDo
	Where(conds ...gen.Condition) IDeptDo
	Order(conds ...field.Expr) IDeptDo
	Distinct(cols ...field.Expr) IDeptDo
	Omit(cols ...field.Expr) IDeptDo
	Join(table schema.Tabler, on ...field.Expr) IDeptDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDeptDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDeptDo
	Group(cols ...field.Expr) IDeptDo
	Having(conds ...gen.Condition) IDeptDo
	Limit(limit int) IDeptDo
	Offset(offset int) IDeptDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDeptDo
	Unscoped() IDeptDo
	Create(values ...*models.Dept) error
	CreateInBatches(values []*models.Dept, batchSize int) error
	Save(values ...*models.Dept) error
	First() (*models.Dept, error)
	Take() (*models.Dept, error)
	Last() (*models.Dept, error)
	Find() ([]*models.Dept, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Dept, err error)
	FindInBatches(result *[]*models.Dept, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Dept) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDeptDo
	Assign(attrs ...field.AssignExpr) IDeptDo
	Joins(fields ...field.RelationField) IDeptDo
	Preload(fields ...field.RelationField) IDeptDo
	FirstOrInit() (*models.Dept, error)
	FirstOrCreate() (*models.Dept, error)
	FindByPage(offset int, limit int) (result []*models.Dept, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDeptDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int64) (result *models.Dept, err error)
	GetByIds(ids []int64) (result []*models.Dept, err error)
	GetByIDAndTID(tid int64, id int64) (result *models.Dept, err error)
	GetByIdsAndTID(tid int64, ids []int64) (result []*models.Dept, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (d deptDo) GetByID(id int64) (result *models.Dept, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM depts WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE id in (@ids)
func (d deptDo) GetByIds(ids []int64) (result []*models.Dept, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, ids)
	generateSQL.WriteString("SELECT * FROM depts WHERE id in (?) ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE id=@id and tenant_id=@tid
func (d deptDo) GetByIDAndTID(tid int64, id int64) (result *models.Dept, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	params = append(params, tid)
	generateSQL.WriteString("SELECT * FROM depts WHERE id=? and tenant_id=? ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE id in (@ids) and tenant_id=@tid
func (d deptDo) GetByIdsAndTID(tid int64, ids []int64) (result []*models.Dept, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, ids)
	params = append(params, tid)
	generateSQL.WriteString("SELECT * FROM depts WHERE id in (?) and tenant_id=? ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (d deptDo) Debug() IDeptDo {
	return d.withDO(d.DO.Debug())
}

func (d deptDo) WithContext(ctx context.Context) IDeptDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deptDo) ReadDB() IDeptDo {
	return d.Clauses(dbresolver.Read)
}

func (d deptDo) WriteDB() IDeptDo {
	return d.Clauses(dbresolver.Write)
}

func (d deptDo) Session(config *gorm.Session) IDeptDo {
	return d.withDO(d.DO.Session(config))
}

func (d deptDo) Clauses(conds ...clause.Expression) IDeptDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deptDo) Returning(value interface{}, columns ...string) IDeptDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deptDo) Not(conds ...gen.Condition) IDeptDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deptDo) Or(conds ...gen.Condition) IDeptDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deptDo) Select(conds ...field.Expr) IDeptDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deptDo) Where(conds ...gen.Condition) IDeptDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deptDo) Order(conds ...field.Expr) IDeptDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deptDo) Distinct(cols ...field.Expr) IDeptDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deptDo) Omit(cols ...field.Expr) IDeptDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deptDo) Join(table schema.Tabler, on ...field.Expr) IDeptDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deptDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDeptDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deptDo) RightJoin(table schema.Tabler, on ...field.Expr) IDeptDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deptDo) Group(cols ...field.Expr) IDeptDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deptDo) Having(conds ...gen.Condition) IDeptDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deptDo) Limit(limit int) IDeptDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deptDo) Offset(offset int) IDeptDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deptDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDeptDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deptDo) Unscoped() IDeptDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deptDo) Create(values ...*models.Dept) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deptDo) CreateInBatches(values []*models.Dept, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deptDo) Save(values ...*models.Dept) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deptDo) First() (*models.Dept, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Dept), nil
	}
}

func (d deptDo) Take() (*models.Dept, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Dept), nil
	}
}

func (d deptDo) Last() (*models.Dept, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Dept), nil
	}
}

func (d deptDo) Find() ([]*models.Dept, error) {
	result, err := d.DO.Find()
	return result.([]*models.Dept), err
}

func (d deptDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Dept, err error) {
	buf := make([]*models.Dept, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deptDo) FindInBatches(result *[]*models.Dept, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deptDo) Attrs(attrs ...field.AssignExpr) IDeptDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deptDo) Assign(attrs ...field.AssignExpr) IDeptDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deptDo) Joins(fields ...field.RelationField) IDeptDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deptDo) Preload(fields ...field.RelationField) IDeptDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deptDo) FirstOrInit() (*models.Dept, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Dept), nil
	}
}

func (d deptDo) FirstOrCreate() (*models.Dept, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Dept), nil
	}
}

func (d deptDo) FindByPage(offset int, limit int) (result []*models.Dept, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deptDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deptDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deptDo) Delete(models ...*models.Dept) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deptDo) withDO(do gen.Dao) *deptDo {
	d.DO = *do.(*gen.DO)
	return d
}
